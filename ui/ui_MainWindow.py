# -*- coding: utf-8 -*-

################################################################################
## Form generated from reading UI file 'ui_MainWindow.ui'
##
## Created by: Qt User Interface Compiler version 5.14.1
##
## WARNING! All changes made in this file will be lost when recompiling UI file!
################################################################################

from PySide2.QtCore import (QCoreApplication, QMetaObject, QObject, QPoint,
    QRect, QSize, QUrl, Qt)
from PySide2.QtGui import (QBrush, QColor, QConicalGradient, QCursor, QFont,
    QFontDatabase, QIcon, QLinearGradient, QPalette, QPainter, QPixmap,
    QRadialGradient)
from PySide2.QtWidgets import *

from image_table_view import ImageTableView


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        if MainWindow.objectName():
            MainWindow.setObjectName(u"MainWindow")
        MainWindow.resize(811, 317)
        sizePolicy = QSizePolicy(QSizePolicy.Maximum, QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setAcceptDrops(True)
        MainWindow.setDockNestingEnabled(False)
        self.actionCross_Line = QAction(MainWindow)
        self.actionCross_Line.setObjectName(u"actionCross_Line")
        self.actionCross_Line.setCheckable(True)
        self.actionProfile = QAction(MainWindow)
        self.actionProfile.setObjectName(u"actionProfile")
        self.actionProfile.setCheckable(True)
        self.actionROI = QAction(MainWindow)
        self.actionROI.setObjectName(u"actionROI")
        self.actionROI.setCheckable(True)
        self.actionNew = QAction(MainWindow)
        self.actionNew.setObjectName(u"actionNew")
        self.actionOpen = QAction(MainWindow)
        self.actionOpen.setObjectName(u"actionOpen")
        self.actionClose = QAction(MainWindow)
        self.actionClose.setObjectName(u"actionClose")
        self.actionClose_All = QAction(MainWindow)
        self.actionClose_All.setObjectName(u"actionClose_All")
        self.actionSave = QAction(MainWindow)
        self.actionSave.setObjectName(u"actionSave")
        self.actionBMP = QAction(MainWindow)
        self.actionBMP.setObjectName(u"actionBMP")
        self.actionJPEG = QAction(MainWindow)
        self.actionJPEG.setObjectName(u"actionJPEG")
        self.actionPNG = QAction(MainWindow)
        self.actionPNG.setObjectName(u"actionPNG")
        self.actionCSV = QAction(MainWindow)
        self.actionCSV.setObjectName(u"actionCSV")
        self.actionPrint = QAction(MainWindow)
        self.actionPrint.setObjectName(u"actionPrint")
        self.actionQuit = QAction(MainWindow)
        self.actionQuit.setObjectName(u"actionQuit")
        self.actionUndo = QAction(MainWindow)
        self.actionUndo.setObjectName(u"actionUndo")
        self.actionCut = QAction(MainWindow)
        self.actionCut.setObjectName(u"actionCut")
        self.actionCopy = QAction(MainWindow)
        self.actionCopy.setObjectName(u"actionCopy")
        self.actionPaste = QAction(MainWindow)
        self.actionPaste.setObjectName(u"actionPaste")
        self.actionClear = QAction(MainWindow)
        self.actionClear.setObjectName(u"actionClear")
        self.actionClear_Outside = QAction(MainWindow)
        self.actionClear_Outside.setObjectName(u"actionClear_Outside")
        self.actionFill = QAction(MainWindow)
        self.actionFill.setObjectName(u"actionFill")
        self.actionInvert = QAction(MainWindow)
        self.actionInvert.setObjectName(u"actionInvert")
        self.action8_bit = QAction(MainWindow)
        self.action8_bit.setObjectName(u"action8_bit")
        self.action8_bit.setCheckable(True)
        self.actionRGB_Color = QAction(MainWindow)
        self.actionRGB_Color.setObjectName(u"actionRGB_Color")
        self.actionRGB_Color.setCheckable(True)
        self.actionShow_Info = QAction(MainWindow)
        self.actionShow_Info.setObjectName(u"actionShow_Info")
        self.actionSplit_Channels = QAction(MainWindow)
        self.actionSplit_Channels.setObjectName(u"actionSplit_Channels")
        self.actionCrop = QAction(MainWindow)
        self.actionCrop.setObjectName(u"actionCrop")
        self.actionDuplicate = QAction(MainWindow)
        self.actionDuplicate.setObjectName(u"actionDuplicate")
        self.actionRename = QAction(MainWindow)
        self.actionRename.setObjectName(u"actionRename")
        self.actionScale = QAction(MainWindow)
        self.actionScale.setObjectName(u"actionScale")
        self.actionVertical_Flip = QAction(MainWindow)
        self.actionVertical_Flip.setObjectName(u"actionVertical_Flip")
        self.actionHorizontal_Flip = QAction(MainWindow)
        self.actionHorizontal_Flip.setObjectName(u"actionHorizontal_Flip")
        self.actionRotate_90_Degree_Right = QAction(MainWindow)
        self.actionRotate_90_Degree_Right.setObjectName(u"actionRotate_90_Degree_Right")
        self.actionRotate_90_Degree_Left = QAction(MainWindow)
        self.actionRotate_90_Degree_Left.setObjectName(u"actionRotate_90_Degree_Left")
        self.actionHSV2RGB = QAction(MainWindow)
        self.actionHSV2RGB.setObjectName(u"actionHSV2RGB")
        self.actionRGB2HSV = QAction(MainWindow)
        self.actionRGB2HSV.setObjectName(u"actionRGB2HSV")
        self.actionRGB2Gray = QAction(MainWindow)
        self.actionRGB2Gray.setObjectName(u"actionRGB2Gray")
        self.actionMerge_Channels = QAction(MainWindow)
        self.actionMerge_Channels.setObjectName(u"actionMerge_Channels")
        self.actionEdge_Detector = QAction(MainWindow)
        self.actionEdge_Detector.setObjectName(u"actionEdge_Detector")
        self.actionBlur = QAction(MainWindow)
        self.actionBlur.setObjectName(u"actionBlur")
        self.actionFFT = QAction(MainWindow)
        self.actionFFT.setObjectName(u"actionFFT")
        self.actionReset_Image = QAction(MainWindow)
        self.actionReset_Image.setObjectName(u"actionReset_Image")
        self.actionLine_Measure = QAction(MainWindow)
        self.actionLine_Measure.setObjectName(u"actionLine_Measure")
        self.actionLine_Measure.setCheckable(True)
        self.actionAngle_Measure = QAction(MainWindow)
        self.actionAngle_Measure.setObjectName(u"actionAngle_Measure")
        self.actionAngle_Measure.setCheckable(True)
        self.actionDataset = QAction(MainWindow)
        self.actionDataset.setObjectName(u"actionDataset")
        self.actionUSB_Camera = QAction(MainWindow)
        self.actionUSB_Camera.setObjectName(u"actionUSB_Camera")
        self.actionZoomIn = QAction(MainWindow)
        self.actionZoomIn.setObjectName(u"actionZoomIn")
        self.actionZoomOut = QAction(MainWindow)
        self.actionZoomOut.setObjectName(u"actionZoomOut")
        self.actionOriginal_Scale = QAction(MainWindow)
        self.actionOriginal_Scale.setObjectName(u"actionOriginal_Scale")
        self.actionFit_View = QAction(MainWindow)
        self.actionFit_View.setObjectName(u"actionFit_View")
        self.actionIndicator = QAction(MainWindow)
        self.actionIndicator.setObjectName(u"actionIndicator")
        self.actionIndicator.setCheckable(True)
        self.actionJPG = QAction(MainWindow)
        self.actionJPG.setObjectName(u"actionJPG")
        self.actionXLSX = QAction(MainWindow)
        self.actionXLSX.setObjectName(u"actionXLSX")
        self.actionHarris_Corner = QAction(MainWindow)
        self.actionHarris_Corner.setObjectName(u"actionHarris_Corner")
        self.actionFAST_Corner = QAction(MainWindow)
        self.actionFAST_Corner.setObjectName(u"actionFAST_Corner")
        self.actionAGAST_Corner = QAction(MainWindow)
        self.actionAGAST_Corner.setObjectName(u"actionAGAST_Corner")
        self.actionMSER_Region = QAction(MainWindow)
        self.actionMSER_Region.setObjectName(u"actionMSER_Region")
        self.actionStar_Detector = QAction(MainWindow)
        self.actionStar_Detector.setObjectName(u"actionStar_Detector")
        self.actionBRIEF_Descriptor = QAction(MainWindow)
        self.actionBRIEF_Descriptor.setObjectName(u"actionBRIEF_Descriptor")
        self.actionFREAK_Descriptor = QAction(MainWindow)
        self.actionFREAK_Descriptor.setObjectName(u"actionFREAK_Descriptor")
        self.actionLATCH_Descriptor = QAction(MainWindow)
        self.actionLATCH_Descriptor.setObjectName(u"actionLATCH_Descriptor")
        self.actionLUCID_Descriptor = QAction(MainWindow)
        self.actionLUCID_Descriptor.setObjectName(u"actionLUCID_Descriptor")
        self.actionDAISY_Descriptor = QAction(MainWindow)
        self.actionDAISY_Descriptor.setObjectName(u"actionDAISY_Descriptor")
        self.actionMSD_Detector = QAction(MainWindow)
        self.actionMSD_Detector.setObjectName(u"actionMSD_Detector")
        self.actionORB = QAction(MainWindow)
        self.actionORB.setObjectName(u"actionORB")
        self.actionKAZE = QAction(MainWindow)
        self.actionKAZE.setObjectName(u"actionKAZE")
        self.actionAKAZE = QAction(MainWindow)
        self.actionAKAZE.setObjectName(u"actionAKAZE")
        self.actionBRISK = QAction(MainWindow)
        self.actionBRISK.setObjectName(u"actionBRISK")
        self.actionSIFT = QAction(MainWindow)
        self.actionSIFT.setObjectName(u"actionSIFT")
        self.actionSURF = QAction(MainWindow)
        self.actionSURF.setObjectName(u"actionSURF")
        self.actionHOG_Descriptor = QAction(MainWindow)
        self.actionHOG_Descriptor.setObjectName(u"actionHOG_Descriptor")
        self.actionHarrLike_Descriptor = QAction(MainWindow)
        self.actionHarrLike_Descriptor.setObjectName(u"actionHarrLike_Descriptor")
        self.actionLBP_Descriptor = QAction(MainWindow)
        self.actionLBP_Descriptor.setObjectName(u"actionLBP_Descriptor")
        self.actionKeyPoint_Matching = QAction(MainWindow)
        self.actionKeyPoint_Matching.setObjectName(u"actionKeyPoint_Matching")
        self.actionKLT_Corner = QAction(MainWindow)
        self.actionKLT_Corner.setObjectName(u"actionKLT_Corner")
        self.actionOptical_Flow = QAction(MainWindow)
        self.actionOptical_Flow.setObjectName(u"actionOptical_Flow")
        self.actionMeanshift = QAction(MainWindow)
        self.actionMeanshift.setObjectName(u"actionMeanshift")
        self.actionCAMshift = QAction(MainWindow)
        self.actionCAMshift.setObjectName(u"actionCAMshift")
        self.actionLinear_Kalman_Filter = QAction(MainWindow)
        self.actionLinear_Kalman_Filter.setObjectName(u"actionLinear_Kalman_Filter")
        self.actionNonLinear_Kalman_Filter = QAction(MainWindow)
        self.actionNonLinear_Kalman_Filter.setObjectName(u"actionNonLinear_Kalman_Filter")
        self.actionUnscented_Kalman_Filter = QAction(MainWindow)
        self.actionUnscented_Kalman_Filter.setObjectName(u"actionUnscented_Kalman_Filter")
        self.actionParticle_Filter = QAction(MainWindow)
        self.actionParticle_Filter.setObjectName(u"actionParticle_Filter")
        self.actionSurface_Plot = QAction(MainWindow)
        self.actionSurface_Plot.setObjectName(u"actionSurface_Plot")
        self.actionWavelet = QAction(MainWindow)
        self.actionWavelet.setObjectName(u"actionWavelet")
        self.actionLabeling = QAction(MainWindow)
        self.actionLabeling.setObjectName(u"actionLabeling")
        self.actionBinarize = QAction(MainWindow)
        self.actionBinarize.setObjectName(u"actionBinarize")
        self.actionMorphology = QAction(MainWindow)
        self.actionMorphology.setObjectName(u"actionMorphology")
        self.actionML_Logistic_Regression = QAction(MainWindow)
        self.actionML_Logistic_Regression.setObjectName(u"actionML_Logistic_Regression")
        self.actionML_KNN = QAction(MainWindow)
        self.actionML_KNN.setObjectName(u"actionML_KNN")
        self.actionML_Linear_Regression = QAction(MainWindow)
        self.actionML_Linear_Regression.setObjectName(u"actionML_Linear_Regression")
        self.actionML_Ridge_Regression = QAction(MainWindow)
        self.actionML_Ridge_Regression.setObjectName(u"actionML_Ridge_Regression")
        self.actionML_Lasso_Regression = QAction(MainWindow)
        self.actionML_Lasso_Regression.setObjectName(u"actionML_Lasso_Regression")
        self.actionML_Elastic_Net_Regression = QAction(MainWindow)
        self.actionML_Elastic_Net_Regression.setObjectName(u"actionML_Elastic_Net_Regression")
        self.actionML_Polinominal_Linear_Regression = QAction(MainWindow)
        self.actionML_Polinominal_Linear_Regression.setObjectName(u"actionML_Polinominal_Linear_Regression")
        self.actionML_Decision_Tree_Regression = QAction(MainWindow)
        self.actionML_Decision_Tree_Regression.setObjectName(u"actionML_Decision_Tree_Regression")
        self.actionML_Random_Foreset_Regression = QAction(MainWindow)
        self.actionML_Random_Foreset_Regression.setObjectName(u"actionML_Random_Foreset_Regression")
        self.actionML_SVM_Regression = QAction(MainWindow)
        self.actionML_SVM_Regression.setObjectName(u"actionML_SVM_Regression")
        self.actionML_Gradient_Boost_Regression = QAction(MainWindow)
        self.actionML_Gradient_Boost_Regression.setObjectName(u"actionML_Gradient_Boost_Regression")
        self.actionML_Gradient_Boost = QAction(MainWindow)
        self.actionML_Gradient_Boost.setObjectName(u"actionML_Gradient_Boost")
        self.actionML_Decision_Tree = QAction(MainWindow)
        self.actionML_Decision_Tree.setObjectName(u"actionML_Decision_Tree")
        self.actionML_Random_Forest = QAction(MainWindow)
        self.actionML_Random_Forest.setObjectName(u"actionML_Random_Forest")
        self.actionML_AdaBoost = QAction(MainWindow)
        self.actionML_AdaBoost.setObjectName(u"actionML_AdaBoost")
        self.actionClustering_KMeans = QAction(MainWindow)
        self.actionClustering_KMeans.setObjectName(u"actionClustering_KMeans")
        self.actionClustering_Hierarchical_Clustering = QAction(MainWindow)
        self.actionClustering_Hierarchical_Clustering.setObjectName(u"actionClustering_Hierarchical_Clustering")
        self.actionClustering_DBSCAN = QAction(MainWindow)
        self.actionClustering_DBSCAN.setObjectName(u"actionClustering_DBSCAN")
        self.actionFeatureExtraction_PCA = QAction(MainWindow)
        self.actionFeatureExtraction_PCA.setObjectName(u"actionFeatureExtraction_PCA")
        self.actionFeatureExtraction_LDA = QAction(MainWindow)
        self.actionFeatureExtraction_LDA.setObjectName(u"actionFeatureExtraction_LDA")
        self.actionFeatureExtraction_SBS = QAction(MainWindow)
        self.actionFeatureExtraction_SBS.setObjectName(u"actionFeatureExtraction_SBS")
        self.actionIP_Address_Camera = QAction(MainWindow)
        self.actionIP_Address_Camera.setObjectName(u"actionIP_Address_Camera")
        self.action24_bit = QAction(MainWindow)
        self.action24_bit.setObjectName(u"action24_bit")
        self.action24_bit.setCheckable(True)
        self.actionGray2RGB = QAction(MainWindow)
        self.actionGray2RGB.setObjectName(u"actionGray2RGB")
        self.actionIDS_Camera = QAction(MainWindow)
        self.actionIDS_Camera.setObjectName(u"actionIDS_Camera")
        self.actionOMRON_Camera = QAction(MainWindow)
        self.actionOMRON_Camera.setObjectName(u"actionOMRON_Camera")
        self.actionBASLER_Camera = QAction(MainWindow)
        self.actionBASLER_Camera.setObjectName(u"actionBASLER_Camera")
        self.actionCOGNEX_Camera = QAction(MainWindow)
        self.actionCOGNEX_Camera.setObjectName(u"actionCOGNEX_Camera")
        self.actionMask = QAction(MainWindow)
        self.actionMask.setObjectName(u"actionMask")
        self.actionMask.setCheckable(True)
        self.actionMask_Import = QAction(MainWindow)
        self.actionMask_Import.setObjectName(u"actionMask_Import")
        self.actionMask_Export = QAction(MainWindow)
        self.actionMask_Export.setObjectName(u"actionMask_Export")
        self.actionMapping = QAction(MainWindow)
        self.actionMapping.setObjectName(u"actionMapping")
        self.actionNoise_Denoise = QAction(MainWindow)
        self.actionNoise_Denoise.setObjectName(u"actionNoise_Denoise")
        self.actionHistogram = QAction(MainWindow)
        self.actionHistogram.setObjectName(u"actionHistogram")
        self.actionUnsharp_Masking = QAction(MainWindow)
        self.actionUnsharp_Masking.setObjectName(u"actionUnsharp_Masking")
        self.actionShow_Histogram = QAction(MainWindow)
        self.actionShow_Histogram.setObjectName(u"actionShow_Histogram")
        self.actionBoarder = QAction(MainWindow)
        self.actionBoarder.setObjectName(u"actionBoarder")
        self.actionEllipse = QAction(MainWindow)
        self.actionEllipse.setObjectName(u"actionEllipse")
        self.actionEllipse.setCheckable(True)
        self.actionLine = QAction(MainWindow)
        self.actionLine.setObjectName(u"actionLine")
        self.actionLine.setCheckable(True)
        self.actionML_SVM = QAction(MainWindow)
        self.actionML_SVM.setObjectName(u"actionML_SVM")
        self.actionSimple_Annotation = QAction(MainWindow)
        self.actionSimple_Annotation.setObjectName(u"actionSimple_Annotation")
        self.actionROI_Annotation = QAction(MainWindow)
        self.actionROI_Annotation.setObjectName(u"actionROI_Annotation")
        self.actionDL_Object_Detection = QAction(MainWindow)
        self.actionDL_Object_Detection.setObjectName(u"actionDL_Object_Detection")
        self.actionVideo_Make = QAction(MainWindow)
        self.actionVideo_Make.setObjectName(u"actionVideo_Make")
        self.actionVideo_Open = QAction(MainWindow)
        self.actionVideo_Open.setObjectName(u"actionVideo_Open")
        self.actionShading = QAction(MainWindow)
        self.actionShading.setObjectName(u"actionShading")
        self.actionTemplate_Matching = QAction(MainWindow)
        self.actionTemplate_Matching.setObjectName(u"actionTemplate_Matching")
        self.actionFigure_Fitting = QAction(MainWindow)
        self.actionFigure_Fitting.setObjectName(u"actionFigure_Fitting")
        self.actionHough = QAction(MainWindow)
        self.actionHough.setObjectName(u"actionHough")
        self.actionDL_Image_Classifier = QAction(MainWindow)
        self.actionDL_Image_Classifier.setObjectName(u"actionDL_Image_Classifier")
        self.actionAffine = QAction(MainWindow)
        self.actionAffine.setObjectName(u"actionAffine")
        self.centralWidget = QWidget(MainWindow)
        self.centralWidget.setObjectName(u"centralWidget")
        sizePolicy1 = QSizePolicy(QSizePolicy.Minimum, QSizePolicy.Maximum)
        sizePolicy1.setHorizontalStretch(0)
        sizePolicy1.setVerticalStretch(0)
        sizePolicy1.setHeightForWidth(self.centralWidget.sizePolicy().hasHeightForWidth())
        self.centralWidget.setSizePolicy(sizePolicy1)
        self.centralWidget.setContextMenuPolicy(Qt.DefaultContextMenu)
        self.gridLayout_2 = QGridLayout(self.centralWidget)
        self.gridLayout_2.setSpacing(6)
        self.gridLayout_2.setContentsMargins(11, 11, 11, 11)
        self.gridLayout_2.setObjectName(u"gridLayout_2")
        self.horizontalLayout = QHBoxLayout()
        self.horizontalLayout.setSpacing(6)
        self.horizontalLayout.setObjectName(u"horizontalLayout")
        self.verticalLayout = QVBoxLayout()
        self.verticalLayout.setSpacing(6)
        self.verticalLayout.setObjectName(u"verticalLayout")
        self.rBtn_View_Mode = QRadioButton(self.centralWidget)
        self.rBtn_View_Mode.setObjectName(u"rBtn_View_Mode")
        self.rBtn_View_Mode.setChecked(True)

        self.verticalLayout.addWidget(self.rBtn_View_Mode)

        self.rBtn_File_Mode = QRadioButton(self.centralWidget)
        self.rBtn_File_Mode.setObjectName(u"rBtn_File_Mode")

        self.verticalLayout.addWidget(self.rBtn_File_Mode)


        self.horizontalLayout.addLayout(self.verticalLayout)


        self.gridLayout_2.addLayout(self.horizontalLayout, 0, 0, 1, 1)

        self.tView_ImageTable = ImageTableView(self.centralWidget)
        self.tView_ImageTable.setObjectName(u"tView_ImageTable")
        sizePolicy2 = QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        sizePolicy2.setHorizontalStretch(0)
        sizePolicy2.setVerticalStretch(0)
        sizePolicy2.setHeightForWidth(self.tView_ImageTable.sizePolicy().hasHeightForWidth())
        self.tView_ImageTable.setSizePolicy(sizePolicy2)
        self.tView_ImageTable.setAcceptDrops(True)

        self.gridLayout_2.addWidget(self.tView_ImageTable, 2, 0, 1, 2)

        self.gridLayout = QGridLayout()
        self.gridLayout.setSpacing(6)
        self.gridLayout.setObjectName(u"gridLayout")
        self.gridLayout.setHorizontalSpacing(0)
        self.lEdit_Input_Dir = QLineEdit(self.centralWidget)
        self.lEdit_Input_Dir.setObjectName(u"lEdit_Input_Dir")
        self.lEdit_Input_Dir.setEnabled(False)

        self.gridLayout.addWidget(self.lEdit_Input_Dir, 0, 0, 1, 1)

        self.tBtn_Input_Dir = QToolButton(self.centralWidget)
        self.tBtn_Input_Dir.setObjectName(u"tBtn_Input_Dir")
        self.tBtn_Input_Dir.setPopupMode(QToolButton.DelayedPopup)
        self.tBtn_Input_Dir.setAutoRaise(False)
        self.tBtn_Input_Dir.setArrowType(Qt.NoArrow)

        self.gridLayout.addWidget(self.tBtn_Input_Dir, 0, 1, 1, 1)

        self.lEdit_Output_Dir = QLineEdit(self.centralWidget)
        self.lEdit_Output_Dir.setObjectName(u"lEdit_Output_Dir")
        self.lEdit_Output_Dir.setEnabled(False)

        self.gridLayout.addWidget(self.lEdit_Output_Dir, 1, 0, 1, 1)

        self.tBtn_Output_Dir = QToolButton(self.centralWidget)
        self.tBtn_Output_Dir.setObjectName(u"tBtn_Output_Dir")

        self.gridLayout.addWidget(self.tBtn_Output_Dir, 1, 1, 1, 1)


        self.gridLayout_2.addLayout(self.gridLayout, 0, 1, 1, 1)

        self.horizontalLayout_3 = QHBoxLayout()
        self.horizontalLayout_3.setSpacing(6)
        self.horizontalLayout_3.setObjectName(u"horizontalLayout_3")
        self.pBtn_ImageTable_Review = QPushButton(self.centralWidget)
        self.pBtn_ImageTable_Review.setObjectName(u"pBtn_ImageTable_Review")

        self.horizontalLayout_3.addWidget(self.pBtn_ImageTable_Review)

        self.pBtn_ImageTable_All_Check = QPushButton(self.centralWidget)
        self.pBtn_ImageTable_All_Check.setObjectName(u"pBtn_ImageTable_All_Check")

        self.horizontalLayout_3.addWidget(self.pBtn_ImageTable_All_Check)

        self.pBtn_ImageTable_All_Uncheck = QPushButton(self.centralWidget)
        self.pBtn_ImageTable_All_Uncheck.setObjectName(u"pBtn_ImageTable_All_Uncheck")

        self.horizontalLayout_3.addWidget(self.pBtn_ImageTable_All_Uncheck)

        self.lEdit_ImageTable_Search_Recode = QLineEdit(self.centralWidget)
        self.lEdit_ImageTable_Search_Recode.setObjectName(u"lEdit_ImageTable_Search_Recode")

        self.horizontalLayout_3.addWidget(self.lEdit_ImageTable_Search_Recode)

        self.horizontalLayout_4 = QHBoxLayout()
        self.horizontalLayout_4.setSpacing(6)
        self.horizontalLayout_4.setObjectName(u"horizontalLayout_4")
        self.lbl_ImageTable_Target_Count = QLabel(self.centralWidget)
        self.lbl_ImageTable_Target_Count.setObjectName(u"lbl_ImageTable_Target_Count")
        sizePolicy3 = QSizePolicy(QSizePolicy.Maximum, QSizePolicy.Preferred)
        sizePolicy3.setHorizontalStretch(0)
        sizePolicy3.setVerticalStretch(0)
        sizePolicy3.setHeightForWidth(self.lbl_ImageTable_Target_Count.sizePolicy().hasHeightForWidth())
        self.lbl_ImageTable_Target_Count.setSizePolicy(sizePolicy3)

        self.horizontalLayout_4.addWidget(self.lbl_ImageTable_Target_Count)

        self.lEdit_ImageTable_Target_Count = QLineEdit(self.centralWidget)
        self.lEdit_ImageTable_Target_Count.setObjectName(u"lEdit_ImageTable_Target_Count")
        sizePolicy4 = QSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        sizePolicy4.setHorizontalStretch(0)
        sizePolicy4.setVerticalStretch(0)
        sizePolicy4.setHeightForWidth(self.lEdit_ImageTable_Target_Count.sizePolicy().hasHeightForWidth())
        self.lEdit_ImageTable_Target_Count.setSizePolicy(sizePolicy4)
        self.lEdit_ImageTable_Target_Count.setMaximumSize(QSize(50, 16777215))

        self.horizontalLayout_4.addWidget(self.lEdit_ImageTable_Target_Count)


        self.horizontalLayout_3.addLayout(self.horizontalLayout_4)


        self.gridLayout_2.addLayout(self.horizontalLayout_3, 1, 0, 1, 2)

        MainWindow.setCentralWidget(self.centralWidget)
        self.menuBar = QMenuBar(MainWindow)
        self.menuBar.setObjectName(u"menuBar")
        self.menuBar.setGeometry(QRect(0, 0, 811, 22))
        self.menuFile = QMenu(self.menuBar)
        self.menuFile.setObjectName(u"menuFile")
        self.menuSave_As = QMenu(self.menuFile)
        self.menuSave_As.setObjectName(u"menuSave_As")
        self.menuEdit = QMenu(self.menuBar)
        self.menuEdit.setObjectName(u"menuEdit")
        self.menuImage = QMenu(self.menuBar)
        self.menuImage.setObjectName(u"menuImage")
        self.menuType = QMenu(self.menuImage)
        self.menuType.setObjectName(u"menuType")
        self.menuColor = QMenu(self.menuImage)
        self.menuColor.setObjectName(u"menuColor")
        self.menuTransform = QMenu(self.menuImage)
        self.menuTransform.setObjectName(u"menuTransform")
        self.menuZoom = QMenu(self.menuImage)
        self.menuZoom.setObjectName(u"menuZoom")
        self.menuMask = QMenu(self.menuImage)
        self.menuMask.setObjectName(u"menuMask")
        self.menuProcess = QMenu(self.menuBar)
        self.menuProcess.setObjectName(u"menuProcess")
        self.menuAnalyze = QMenu(self.menuBar)
        self.menuAnalyze.setObjectName(u"menuAnalyze")
        self.menuML_DL = QMenu(self.menuBar)
        self.menuML_DL.setObjectName(u"menuML_DL")
        self.menu = QMenu(self.menuML_DL)
        self.menu.setObjectName(u"menu")
        self.menuFeature_Extraction = QMenu(self.menuML_DL)
        self.menuFeature_Extraction.setObjectName(u"menuFeature_Extraction")
        self.menuML = QMenu(self.menuML_DL)
        self.menuML.setObjectName(u"menuML")
        self.menuClassification = QMenu(self.menuML)
        self.menuClassification.setObjectName(u"menuClassification")
        self.menuRegressor = QMenu(self.menuML)
        self.menuRegressor.setObjectName(u"menuRegressor")
        self.menuClustering = QMenu(self.menuML)
        self.menuClustering.setObjectName(u"menuClustering")
        self.menuDL = QMenu(self.menuML_DL)
        self.menuDL.setObjectName(u"menuDL")
        self.menuDL_Classification = QMenu(self.menuDL)
        self.menuDL_Classification.setObjectName(u"menuDL_Classification")
        self.menuWindow = QMenu(self.menuBar)
        self.menuWindow.setObjectName(u"menuWindow")
        self.menuHelp = QMenu(self.menuBar)
        self.menuHelp.setObjectName(u"menuHelp")
        self.menuCamera = QMenu(self.menuBar)
        self.menuCamera.setObjectName(u"menuCamera")
        self.menuVideo = QMenu(self.menuBar)
        self.menuVideo.setObjectName(u"menuVideo")
        self.menuLocal_Feature = QMenu(self.menuBar)
        self.menuLocal_Feature.setObjectName(u"menuLocal_Feature")
        self.menuKeyPoint = QMenu(self.menuLocal_Feature)
        self.menuKeyPoint.setObjectName(u"menuKeyPoint")
        self.menuDescriptor = QMenu(self.menuLocal_Feature)
        self.menuDescriptor.setObjectName(u"menuDescriptor")
        self.menuKeyPoint_Descriptor = QMenu(self.menuLocal_Feature)
        self.menuKeyPoint_Descriptor.setObjectName(u"menuKeyPoint_Descriptor")
        self.menuDetector = QMenu(self.menuBar)
        self.menuDetector.setObjectName(u"menuDetector")
        self.menuMition = QMenu(self.menuBar)
        self.menuMition.setObjectName(u"menuMition")
        self.menuKalman_Filter = QMenu(self.menuMition)
        self.menuKalman_Filter.setObjectName(u"menuKalman_Filter")
        MainWindow.setMenuBar(self.menuBar)
        self.toolBar = QToolBar(MainWindow)
        self.toolBar.setObjectName(u"toolBar")
        MainWindow.addToolBar(Qt.TopToolBarArea, self.toolBar)
        self.statusBar = QStatusBar(MainWindow)
        self.statusBar.setObjectName(u"statusBar")
        MainWindow.setStatusBar(self.statusBar)

        self.menuBar.addAction(self.menuFile.menuAction())
        self.menuBar.addAction(self.menuEdit.menuAction())
        self.menuBar.addAction(self.menuImage.menuAction())
        self.menuBar.addAction(self.menuCamera.menuAction())
        self.menuBar.addAction(self.menuVideo.menuAction())
        self.menuBar.addAction(self.menuProcess.menuAction())
        self.menuBar.addAction(self.menuAnalyze.menuAction())
        self.menuBar.addAction(self.menuLocal_Feature.menuAction())
        self.menuBar.addAction(self.menuDetector.menuAction())
        self.menuBar.addAction(self.menuMition.menuAction())
        self.menuBar.addAction(self.menuML_DL.menuAction())
        self.menuBar.addAction(self.menuWindow.menuAction())
        self.menuBar.addAction(self.menuHelp.menuAction())
        self.menuFile.addAction(self.actionNew)
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionClose)
        self.menuFile.addAction(self.actionClose_All)
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.menuSave_As.menuAction())
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionPrint)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionQuit)
        self.menuSave_As.addAction(self.actionBMP)
        self.menuSave_As.addAction(self.actionJPG)
        self.menuSave_As.addAction(self.actionJPEG)
        self.menuSave_As.addAction(self.actionPNG)
        self.menuSave_As.addSeparator()
        self.menuSave_As.addAction(self.actionCSV)
        self.menuSave_As.addAction(self.actionXLSX)
        self.menuEdit.addAction(self.actionUndo)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionCut)
        self.menuEdit.addAction(self.actionCopy)
        self.menuEdit.addAction(self.actionPaste)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionClear)
        self.menuEdit.addAction(self.actionClear_Outside)
        self.menuEdit.addAction(self.actionFill)
        self.menuEdit.addAction(self.actionInvert)
        self.menuImage.addAction(self.menuType.menuAction())
        self.menuImage.addSeparator()
        self.menuImage.addAction(self.actionShow_Info)
        self.menuImage.addAction(self.menuColor.menuAction())
        self.menuImage.addAction(self.menuMask.menuAction())
        self.menuImage.addSeparator()
        self.menuImage.addAction(self.actionBoarder)
        self.menuImage.addAction(self.actionCrop)
        self.menuImage.addAction(self.actionDuplicate)
        self.menuImage.addAction(self.actionRename)
        self.menuImage.addAction(self.actionScale)
        self.menuImage.addAction(self.menuTransform.menuAction())
        self.menuImage.addSeparator()
        self.menuImage.addAction(self.menuZoom.menuAction())
        self.menuType.addAction(self.action8_bit)
        self.menuType.addAction(self.action24_bit)
        self.menuType.addAction(self.actionRGB_Color)
        self.menuColor.addAction(self.actionRGB2Gray)
        self.menuColor.addAction(self.actionGray2RGB)
        self.menuColor.addAction(self.actionRGB2HSV)
        self.menuColor.addAction(self.actionHSV2RGB)
        self.menuColor.addSeparator()
        self.menuColor.addAction(self.actionSplit_Channels)
        self.menuColor.addAction(self.actionMerge_Channels)
        self.menuTransform.addAction(self.actionVertical_Flip)
        self.menuTransform.addAction(self.actionHorizontal_Flip)
        self.menuTransform.addAction(self.actionRotate_90_Degree_Right)
        self.menuTransform.addAction(self.actionRotate_90_Degree_Left)
        self.menuTransform.addAction(self.actionAffine)
        self.menuZoom.addAction(self.actionZoomIn)
        self.menuZoom.addAction(self.actionZoomOut)
        self.menuZoom.addAction(self.actionOriginal_Scale)
        self.menuZoom.addAction(self.actionFit_View)
        self.menuMask.addAction(self.actionMask_Import)
        self.menuMask.addAction(self.actionMask_Export)
        self.menuProcess.addAction(self.actionBlur)
        self.menuProcess.addAction(self.actionShading)
        self.menuProcess.addAction(self.actionUnsharp_Masking)
        self.menuProcess.addAction(self.actionEdge_Detector)
        self.menuProcess.addAction(self.actionMapping)
        self.menuProcess.addAction(self.actionBinarize)
        self.menuProcess.addAction(self.actionMorphology)
        self.menuProcess.addAction(self.actionNoise_Denoise)
        self.menuProcess.addAction(self.actionHistogram)
        self.menuAnalyze.addAction(self.actionLabeling)
        self.menuAnalyze.addSeparator()
        self.menuAnalyze.addAction(self.actionShow_Histogram)
        self.menuAnalyze.addAction(self.actionSurface_Plot)
        self.menuAnalyze.addSeparator()
        self.menuAnalyze.addAction(self.actionFFT)
        self.menuAnalyze.addAction(self.actionWavelet)
        self.menuML_DL.addAction(self.menu.menuAction())
        self.menuML_DL.addSeparator()
        self.menuML_DL.addAction(self.actionDataset)
        self.menuML_DL.addSeparator()
        self.menuML_DL.addAction(self.menuDL.menuAction())
        self.menuML_DL.addAction(self.menuML.menuAction())
        self.menuML_DL.addSeparator()
        self.menuML_DL.addAction(self.menuFeature_Extraction.menuAction())
        self.menu.addAction(self.actionSimple_Annotation)
        self.menu.addSeparator()
        self.menu.addAction(self.actionROI_Annotation)
        self.menuFeature_Extraction.addAction(self.actionFeatureExtraction_PCA)
        self.menuFeature_Extraction.addAction(self.actionFeatureExtraction_LDA)
        self.menuFeature_Extraction.addAction(self.actionFeatureExtraction_SBS)
        self.menuML.addAction(self.menuClassification.menuAction())
        self.menuML.addAction(self.menuRegressor.menuAction())
        self.menuML.addAction(self.menuClustering.menuAction())
        self.menuClassification.addAction(self.actionML_SVM)
        self.menuClassification.addAction(self.actionML_Logistic_Regression)
        self.menuClassification.addAction(self.actionML_KNN)
        self.menuClassification.addSeparator()
        self.menuClassification.addAction(self.actionML_Decision_Tree)
        self.menuClassification.addAction(self.actionML_Random_Forest)
        self.menuClassification.addSeparator()
        self.menuClassification.addAction(self.actionML_AdaBoost)
        self.menuClassification.addAction(self.actionML_Gradient_Boost)
        self.menuRegressor.addAction(self.actionML_Linear_Regression)
        self.menuRegressor.addAction(self.actionML_Polinominal_Linear_Regression)
        self.menuRegressor.addSeparator()
        self.menuRegressor.addAction(self.actionML_Ridge_Regression)
        self.menuRegressor.addAction(self.actionML_Lasso_Regression)
        self.menuRegressor.addAction(self.actionML_Elastic_Net_Regression)
        self.menuRegressor.addSeparator()
        self.menuRegressor.addAction(self.actionML_Decision_Tree_Regression)
        self.menuRegressor.addAction(self.actionML_Random_Foreset_Regression)
        self.menuRegressor.addSeparator()
        self.menuRegressor.addAction(self.actionML_SVM_Regression)
        self.menuRegressor.addSeparator()
        self.menuRegressor.addAction(self.actionML_Gradient_Boost_Regression)
        self.menuClustering.addAction(self.actionClustering_KMeans)
        self.menuClustering.addAction(self.actionClustering_Hierarchical_Clustering)
        self.menuClustering.addAction(self.actionClustering_DBSCAN)
        self.menuDL.addAction(self.menuDL_Classification.menuAction())
        self.menuDL_Classification.addAction(self.actionDL_Image_Classifier)
        self.menuDL_Classification.addAction(self.actionDL_Object_Detection)
        self.menuCamera.addAction(self.actionUSB_Camera)
        self.menuCamera.addAction(self.actionIP_Address_Camera)
        self.menuCamera.addSeparator()
        self.menuCamera.addAction(self.actionIDS_Camera)
        self.menuCamera.addAction(self.actionOMRON_Camera)
        self.menuCamera.addAction(self.actionBASLER_Camera)
        self.menuCamera.addAction(self.actionCOGNEX_Camera)
        self.menuVideo.addAction(self.actionVideo_Make)
        self.menuVideo.addAction(self.actionVideo_Open)
        self.menuLocal_Feature.addAction(self.menuKeyPoint_Descriptor.menuAction())
        self.menuLocal_Feature.addAction(self.menuKeyPoint.menuAction())
        self.menuLocal_Feature.addAction(self.menuDescriptor.menuAction())
        self.menuLocal_Feature.addSeparator()
        self.menuLocal_Feature.addAction(self.actionKeyPoint_Matching)
        self.menuKeyPoint.addAction(self.actionKLT_Corner)
        self.menuKeyPoint.addAction(self.actionHarris_Corner)
        self.menuKeyPoint.addAction(self.actionFAST_Corner)
        self.menuKeyPoint.addAction(self.actionAGAST_Corner)
        self.menuKeyPoint.addSeparator()
        self.menuKeyPoint.addAction(self.actionMSER_Region)
        self.menuKeyPoint.addSeparator()
        self.menuKeyPoint.addAction(self.actionStar_Detector)
        self.menuKeyPoint.addAction(self.actionMSD_Detector)
        self.menuDescriptor.addAction(self.actionBRIEF_Descriptor)
        self.menuDescriptor.addAction(self.actionFREAK_Descriptor)
        self.menuDescriptor.addAction(self.actionLATCH_Descriptor)
        self.menuDescriptor.addAction(self.actionLUCID_Descriptor)
        self.menuDescriptor.addAction(self.actionDAISY_Descriptor)
        self.menuDescriptor.addSeparator()
        self.menuDescriptor.addAction(self.actionHOG_Descriptor)
        self.menuDescriptor.addAction(self.actionHarrLike_Descriptor)
        self.menuDescriptor.addAction(self.actionLBP_Descriptor)
        self.menuKeyPoint_Descriptor.addAction(self.actionORB)
        self.menuKeyPoint_Descriptor.addAction(self.actionBRISK)
        self.menuKeyPoint_Descriptor.addAction(self.actionKAZE)
        self.menuKeyPoint_Descriptor.addAction(self.actionAKAZE)
        self.menuKeyPoint_Descriptor.addSeparator()
        self.menuKeyPoint_Descriptor.addAction(self.actionSIFT)
        self.menuKeyPoint_Descriptor.addAction(self.actionSURF)
        self.menuDetector.addAction(self.actionHough)
        self.menuDetector.addAction(self.actionTemplate_Matching)
        self.menuDetector.addAction(self.actionFigure_Fitting)
        self.menuMition.addAction(self.actionOptical_Flow)
        self.menuMition.addAction(self.actionMeanshift)
        self.menuMition.addAction(self.actionCAMshift)
        self.menuMition.addAction(self.menuKalman_Filter.menuAction())
        self.menuMition.addAction(self.actionParticle_Filter)
        self.menuKalman_Filter.addAction(self.actionLinear_Kalman_Filter)
        self.menuKalman_Filter.addSeparator()
        self.menuKalman_Filter.addAction(self.actionNonLinear_Kalman_Filter)
        self.menuKalman_Filter.addAction(self.actionUnscented_Kalman_Filter)
        self.toolBar.addAction(self.actionReset_Image)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionIndicator)
        self.toolBar.addAction(self.actionMask)
        self.toolBar.addAction(self.actionCross_Line)
        self.toolBar.addAction(self.actionProfile)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionROI)
        self.toolBar.addAction(self.actionLine)
        self.toolBar.addAction(self.actionEllipse)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionLine_Measure)
        self.toolBar.addAction(self.actionAngle_Measure)

        self.retranslateUi(MainWindow)

        QMetaObject.connectSlotsByName(MainWindow)
    # setupUi

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(QCoreApplication.translate("MainWindow", u"MainWindow", None))
        self.actionCross_Line.setText(QCoreApplication.translate("MainWindow", u"Cross Line", None))
#if QT_CONFIG(tooltip)
        self.actionCross_Line.setToolTip(QCoreApplication.translate("MainWindow", u"Cross Line", None))
#endif // QT_CONFIG(tooltip)
        self.actionProfile.setText(QCoreApplication.translate("MainWindow", u"Profile", None))
        self.actionROI.setText(QCoreApplication.translate("MainWindow", u"ROI", None))
        self.actionNew.setText(QCoreApplication.translate("MainWindow", u"New", None))
#if QT_CONFIG(tooltip)
        self.actionNew.setToolTip(QCoreApplication.translate("MainWindow", u"New", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionNew.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+N", None))
#endif // QT_CONFIG(shortcut)
        self.actionOpen.setText(QCoreApplication.translate("MainWindow", u"Open", None))
#if QT_CONFIG(shortcut)
        self.actionOpen.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+O", None))
#endif // QT_CONFIG(shortcut)
        self.actionClose.setText(QCoreApplication.translate("MainWindow", u"Close", None))
#if QT_CONFIG(shortcut)
        self.actionClose.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+W", None))
#endif // QT_CONFIG(shortcut)
        self.actionClose_All.setText(QCoreApplication.translate("MainWindow", u"Close All", None))
#if QT_CONFIG(shortcut)
        self.actionClose_All.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+W", None))
#endif // QT_CONFIG(shortcut)
        self.actionSave.setText(QCoreApplication.translate("MainWindow", u"Save", None))
#if QT_CONFIG(shortcut)
        self.actionSave.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+S", None))
#endif // QT_CONFIG(shortcut)
        self.actionBMP.setText(QCoreApplication.translate("MainWindow", u"BMP", None))
        self.actionJPEG.setText(QCoreApplication.translate("MainWindow", u"JPEG", None))
        self.actionPNG.setText(QCoreApplication.translate("MainWindow", u"PNG", None))
        self.actionCSV.setText(QCoreApplication.translate("MainWindow", u"CSV", None))
        self.actionPrint.setText(QCoreApplication.translate("MainWindow", u"Print", None))
#if QT_CONFIG(shortcut)
        self.actionPrint.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+P", None))
#endif // QT_CONFIG(shortcut)
        self.actionQuit.setText(QCoreApplication.translate("MainWindow", u"Quit", None))
#if QT_CONFIG(shortcut)
        self.actionQuit.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Q", None))
#endif // QT_CONFIG(shortcut)
        self.actionUndo.setText(QCoreApplication.translate("MainWindow", u"Undo", None))
#if QT_CONFIG(shortcut)
        self.actionUndo.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Z", None))
#endif // QT_CONFIG(shortcut)
        self.actionCut.setText(QCoreApplication.translate("MainWindow", u"Cut", None))
#if QT_CONFIG(shortcut)
        self.actionCut.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+X", None))
#endif // QT_CONFIG(shortcut)
        self.actionCopy.setText(QCoreApplication.translate("MainWindow", u"Copy", None))
#if QT_CONFIG(shortcut)
        self.actionCopy.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+C", None))
#endif // QT_CONFIG(shortcut)
        self.actionPaste.setText(QCoreApplication.translate("MainWindow", u"Paste", None))
#if QT_CONFIG(shortcut)
        self.actionPaste.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+V", None))
#endif // QT_CONFIG(shortcut)
        self.actionClear.setText(QCoreApplication.translate("MainWindow", u"Clear", None))
        self.actionClear_Outside.setText(QCoreApplication.translate("MainWindow", u"Clear outside", None))
#if QT_CONFIG(tooltip)
        self.actionClear_Outside.setToolTip(QCoreApplication.translate("MainWindow", u"Clear Outside", None))
#endif // QT_CONFIG(tooltip)
        self.actionFill.setText(QCoreApplication.translate("MainWindow", u"Fill", None))
        self.actionInvert.setText(QCoreApplication.translate("MainWindow", u"Invert", None))
        self.action8_bit.setText(QCoreApplication.translate("MainWindow", u"8-bit", None))
        self.actionRGB_Color.setText(QCoreApplication.translate("MainWindow", u"RGB Color", None))
        self.actionShow_Info.setText(QCoreApplication.translate("MainWindow", u"Show Info", None))
        self.actionSplit_Channels.setText(QCoreApplication.translate("MainWindow", u"Split Channels", None))
        self.actionCrop.setText(QCoreApplication.translate("MainWindow", u"Crop", None))
#if QT_CONFIG(shortcut)
        self.actionCrop.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+X", None))
#endif // QT_CONFIG(shortcut)
        self.actionDuplicate.setText(QCoreApplication.translate("MainWindow", u"Duplicate", None))
#if QT_CONFIG(shortcut)
        self.actionDuplicate.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+D", None))
#endif // QT_CONFIG(shortcut)
        self.actionRename.setText(QCoreApplication.translate("MainWindow", u"Rename", None))
        self.actionScale.setText(QCoreApplication.translate("MainWindow", u"Scale", None))
#if QT_CONFIG(shortcut)
        self.actionScale.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+E", None))
#endif // QT_CONFIG(shortcut)
        self.actionVertical_Flip.setText(QCoreApplication.translate("MainWindow", u"Vertical Flip", None))
        self.actionHorizontal_Flip.setText(QCoreApplication.translate("MainWindow", u"Horizontal Flip", None))
        self.actionRotate_90_Degree_Right.setText(QCoreApplication.translate("MainWindow", u"Rotate 90 Degree Right", None))
        self.actionRotate_90_Degree_Left.setText(QCoreApplication.translate("MainWindow", u"Rotate 90 Degree Left", None))
        self.actionHSV2RGB.setText(QCoreApplication.translate("MainWindow", u"HSV -> RGB", None))
#if QT_CONFIG(tooltip)
        self.actionHSV2RGB.setToolTip(QCoreApplication.translate("MainWindow", u"HSV -> RGB", None))
#endif // QT_CONFIG(tooltip)
        self.actionRGB2HSV.setText(QCoreApplication.translate("MainWindow", u"RGB -> HSV", None))
#if QT_CONFIG(tooltip)
        self.actionRGB2HSV.setToolTip(QCoreApplication.translate("MainWindow", u"RGB -> HSV", None))
#endif // QT_CONFIG(tooltip)
        self.actionRGB2Gray.setText(QCoreApplication.translate("MainWindow", u"RGB -> Gray", None))
#if QT_CONFIG(tooltip)
        self.actionRGB2Gray.setToolTip(QCoreApplication.translate("MainWindow", u"RGB -> Gray", None))
#endif // QT_CONFIG(tooltip)
        self.actionMerge_Channels.setText(QCoreApplication.translate("MainWindow", u"Merge Channels", None))
        self.actionEdge_Detector.setText(QCoreApplication.translate("MainWindow", u"Edge Detector", None))
#if QT_CONFIG(tooltip)
        self.actionEdge_Detector.setToolTip(QCoreApplication.translate("MainWindow", u"Detect Edge", None))
#endif // QT_CONFIG(tooltip)
        self.actionBlur.setText(QCoreApplication.translate("MainWindow", u"Blur", None))
#if QT_CONFIG(tooltip)
        self.actionBlur.setToolTip(QCoreApplication.translate("MainWindow", u"Blur Filter", None))
#endif // QT_CONFIG(tooltip)
        self.actionFFT.setText(QCoreApplication.translate("MainWindow", u"FFT", None))
        self.actionReset_Image.setText(QCoreApplication.translate("MainWindow", u"Reset Image", None))
        self.actionLine_Measure.setText(QCoreApplication.translate("MainWindow", u"Line Measure", None))
        self.actionAngle_Measure.setText(QCoreApplication.translate("MainWindow", u"Angle Measure", None))
        self.actionDataset.setText(QCoreApplication.translate("MainWindow", u"Dataset", None))
        self.actionUSB_Camera.setText(QCoreApplication.translate("MainWindow", u"USB", None))
        self.actionZoomIn.setText(QCoreApplication.translate("MainWindow", u"In [+]", None))
        self.actionZoomOut.setText(QCoreApplication.translate("MainWindow", u"Out [-]", None))
#if QT_CONFIG(tooltip)
        self.actionZoomOut.setToolTip(QCoreApplication.translate("MainWindow", u"Out [-]", None))
#endif // QT_CONFIG(tooltip)
        self.actionOriginal_Scale.setText(QCoreApplication.translate("MainWindow", u"Original Scale", None))
        self.actionFit_View.setText(QCoreApplication.translate("MainWindow", u"Fit View", None))
        self.actionIndicator.setText(QCoreApplication.translate("MainWindow", u"Indicator", None))
        self.actionJPG.setText(QCoreApplication.translate("MainWindow", u"JPG", None))
        self.actionXLSX.setText(QCoreApplication.translate("MainWindow", u"XLSX", None))
        self.actionHarris_Corner.setText(QCoreApplication.translate("MainWindow", u"Harris Corner", None))
#if QT_CONFIG(tooltip)
        self.actionHarris_Corner.setToolTip(QCoreApplication.translate("MainWindow", u"Harris Corner", None))
#endif // QT_CONFIG(tooltip)
        self.actionFAST_Corner.setText(QCoreApplication.translate("MainWindow", u"FAST Corner", None))
        self.actionAGAST_Corner.setText(QCoreApplication.translate("MainWindow", u"AGAST Corner", None))
        self.actionMSER_Region.setText(QCoreApplication.translate("MainWindow", u"MSER Region", None))
#if QT_CONFIG(tooltip)
        self.actionMSER_Region.setToolTip(QCoreApplication.translate("MainWindow", u"MSER Region", None))
#endif // QT_CONFIG(tooltip)
        self.actionStar_Detector.setText(QCoreApplication.translate("MainWindow", u"Star Detector", None))
        self.actionBRIEF_Descriptor.setText(QCoreApplication.translate("MainWindow", u"BRIEF Descriptor", None))
        self.actionFREAK_Descriptor.setText(QCoreApplication.translate("MainWindow", u"FREAK Descriptor", None))
        self.actionLATCH_Descriptor.setText(QCoreApplication.translate("MainWindow", u"LATCH Descriptor", None))
        self.actionLUCID_Descriptor.setText(QCoreApplication.translate("MainWindow", u"LUCID Descriptor", None))
        self.actionDAISY_Descriptor.setText(QCoreApplication.translate("MainWindow", u"DAISY Descriptor", None))
        self.actionMSD_Detector.setText(QCoreApplication.translate("MainWindow", u"MSD Detector", None))
        self.actionORB.setText(QCoreApplication.translate("MainWindow", u"ORB", None))
        self.actionKAZE.setText(QCoreApplication.translate("MainWindow", u"KAZE", None))
        self.actionAKAZE.setText(QCoreApplication.translate("MainWindow", u"AKAZE", None))
        self.actionBRISK.setText(QCoreApplication.translate("MainWindow", u"BRISK", None))
        self.actionSIFT.setText(QCoreApplication.translate("MainWindow", u"SIFT", None))
        self.actionSURF.setText(QCoreApplication.translate("MainWindow", u"SURF", None))
        self.actionHOG_Descriptor.setText(QCoreApplication.translate("MainWindow", u"HOG Descriptor", None))
        self.actionHarrLike_Descriptor.setText(QCoreApplication.translate("MainWindow", u"HarrLike Descriptor", None))
        self.actionLBP_Descriptor.setText(QCoreApplication.translate("MainWindow", u"LBP Descriptor", None))
        self.actionKeyPoint_Matching.setText(QCoreApplication.translate("MainWindow", u"KeyPoint Matching", None))
        self.actionKLT_Corner.setText(QCoreApplication.translate("MainWindow", u"KLT Corner", None))
        self.actionOptical_Flow.setText(QCoreApplication.translate("MainWindow", u"Optical Flow", None))
        self.actionMeanshift.setText(QCoreApplication.translate("MainWindow", u"Meanshift", None))
        self.actionCAMshift.setText(QCoreApplication.translate("MainWindow", u"CAMshift", None))
        self.actionLinear_Kalman_Filter.setText(QCoreApplication.translate("MainWindow", u"Linear Kalman Filter", None))
        self.actionNonLinear_Kalman_Filter.setText(QCoreApplication.translate("MainWindow", u"NonLinear Kalman Filter", None))
        self.actionUnscented_Kalman_Filter.setText(QCoreApplication.translate("MainWindow", u"Unscented Kalman Filter", None))
        self.actionParticle_Filter.setText(QCoreApplication.translate("MainWindow", u"Particle Filter", None))
        self.actionSurface_Plot.setText(QCoreApplication.translate("MainWindow", u"Surface Plot", None))
        self.actionWavelet.setText(QCoreApplication.translate("MainWindow", u"Wavelet", None))
        self.actionLabeling.setText(QCoreApplication.translate("MainWindow", u"Labeling", None))
        self.actionBinarize.setText(QCoreApplication.translate("MainWindow", u"Binarize", None))
        self.actionMorphology.setText(QCoreApplication.translate("MainWindow", u"Morphology", None))
        self.actionML_Logistic_Regression.setText(QCoreApplication.translate("MainWindow", u"Logistic Regression", None))
        self.actionML_KNN.setText(QCoreApplication.translate("MainWindow", u"kNN", None))
        self.actionML_Linear_Regression.setText(QCoreApplication.translate("MainWindow", u"Linear Regression", None))
        self.actionML_Ridge_Regression.setText(QCoreApplication.translate("MainWindow", u"Ridge Regression", None))
        self.actionML_Lasso_Regression.setText(QCoreApplication.translate("MainWindow", u"Lasso Regression", None))
        self.actionML_Elastic_Net_Regression.setText(QCoreApplication.translate("MainWindow", u"Elastic Net Regression", None))
        self.actionML_Polinominal_Linear_Regression.setText(QCoreApplication.translate("MainWindow", u"Polinominal Linear Regression", None))
        self.actionML_Decision_Tree_Regression.setText(QCoreApplication.translate("MainWindow", u"Decision Tree Regression", None))
        self.actionML_Random_Foreset_Regression.setText(QCoreApplication.translate("MainWindow", u"Random Foreset Regression", None))
        self.actionML_SVM_Regression.setText(QCoreApplication.translate("MainWindow", u"SVM Regression", None))
        self.actionML_Gradient_Boost_Regression.setText(QCoreApplication.translate("MainWindow", u"Gradient Boost Regression", None))
        self.actionML_Gradient_Boost.setText(QCoreApplication.translate("MainWindow", u"Gradient Boost", None))
        self.actionML_Decision_Tree.setText(QCoreApplication.translate("MainWindow", u"Decision Tree", None))
        self.actionML_Random_Forest.setText(QCoreApplication.translate("MainWindow", u"Random Forest", None))
        self.actionML_AdaBoost.setText(QCoreApplication.translate("MainWindow", u"AdaBoost", None))
        self.actionClustering_KMeans.setText(QCoreApplication.translate("MainWindow", u"K Means", None))
        self.actionClustering_Hierarchical_Clustering.setText(QCoreApplication.translate("MainWindow", u"Hierarchical Clustering", None))
        self.actionClustering_DBSCAN.setText(QCoreApplication.translate("MainWindow", u"DBSCAN", None))
        self.actionFeatureExtraction_PCA.setText(QCoreApplication.translate("MainWindow", u"PCA", None))
        self.actionFeatureExtraction_LDA.setText(QCoreApplication.translate("MainWindow", u"LDA", None))
        self.actionFeatureExtraction_SBS.setText(QCoreApplication.translate("MainWindow", u"SBS", None))
        self.actionIP_Address_Camera.setText(QCoreApplication.translate("MainWindow", u"IP Address", None))
        self.action24_bit.setText(QCoreApplication.translate("MainWindow", u"24-bit", None))
        self.actionGray2RGB.setText(QCoreApplication.translate("MainWindow", u"Gray -> RGB", None))
#if QT_CONFIG(tooltip)
        self.actionGray2RGB.setToolTip(QCoreApplication.translate("MainWindow", u"Gray -> RGB", None))
#endif // QT_CONFIG(tooltip)
        self.actionIDS_Camera.setText(QCoreApplication.translate("MainWindow", u"IDS", None))
#if QT_CONFIG(tooltip)
        self.actionIDS_Camera.setToolTip(QCoreApplication.translate("MainWindow", u"IDS Camera USB or GigE Interface", None))
#endif // QT_CONFIG(tooltip)
        self.actionOMRON_Camera.setText(QCoreApplication.translate("MainWindow", u"OMRON", None))
#if QT_CONFIG(tooltip)
        self.actionOMRON_Camera.setToolTip(QCoreApplication.translate("MainWindow", u"Omron sentech camera USB or GigE Interface", None))
#endif // QT_CONFIG(tooltip)
        self.actionBASLER_Camera.setText(QCoreApplication.translate("MainWindow", u"BASLER", None))
#if QT_CONFIG(tooltip)
        self.actionBASLER_Camera.setToolTip(QCoreApplication.translate("MainWindow", u"BALSER Camera USB or GigE Interface", None))
#endif // QT_CONFIG(tooltip)
        self.actionCOGNEX_Camera.setText(QCoreApplication.translate("MainWindow", u"COGNEX", None))
#if QT_CONFIG(tooltip)
        self.actionCOGNEX_Camera.setToolTip(QCoreApplication.translate("MainWindow", u"COGNEX Camera USB or GigE Interface", None))
#endif // QT_CONFIG(tooltip)
        self.actionMask.setText(QCoreApplication.translate("MainWindow", u"Mask", None))
#if QT_CONFIG(tooltip)
        self.actionMask.setToolTip(QCoreApplication.translate("MainWindow", u"Show or Hide Mask", None))
#endif // QT_CONFIG(tooltip)
        self.actionMask_Import.setText(QCoreApplication.translate("MainWindow", u"Import Mask", None))
        self.actionMask_Export.setText(QCoreApplication.translate("MainWindow", u"Export Mask", None))
        self.actionMapping.setText(QCoreApplication.translate("MainWindow", u"Mapping", None))
#if QT_CONFIG(tooltip)
        self.actionMapping.setToolTip(QCoreApplication.translate("MainWindow", u"Mapping image color", None))
#endif // QT_CONFIG(tooltip)
        self.actionNoise_Denoise.setText(QCoreApplication.translate("MainWindow", u"Noise/Denoise", None))
        self.actionHistogram.setText(QCoreApplication.translate("MainWindow", u"Histogram", None))
        self.actionUnsharp_Masking.setText(QCoreApplication.translate("MainWindow", u"Unsharp Masking", None))
        self.actionShow_Histogram.setText(QCoreApplication.translate("MainWindow", u"Show Histogram", None))
#if QT_CONFIG(tooltip)
        self.actionShow_Histogram.setToolTip(QCoreApplication.translate("MainWindow", u"Show Histogram", None))
#endif // QT_CONFIG(tooltip)
        self.actionBoarder.setText(QCoreApplication.translate("MainWindow", u"Boarder", None))
        self.actionEllipse.setText(QCoreApplication.translate("MainWindow", u"Ellipse", None))
        self.actionLine.setText(QCoreApplication.translate("MainWindow", u"Line", None))
        self.actionML_SVM.setText(QCoreApplication.translate("MainWindow", u"SVM", None))
        self.actionSimple_Annotation.setText(QCoreApplication.translate("MainWindow", u"Simple Annotation", None))
        self.actionROI_Annotation.setText(QCoreApplication.translate("MainWindow", u"ROI Annotation", None))
        self.actionDL_Object_Detection.setText(QCoreApplication.translate("MainWindow", u"Object Detection", None))
        self.actionVideo_Make.setText(QCoreApplication.translate("MainWindow", u"Video Make", None))
        self.actionVideo_Open.setText(QCoreApplication.translate("MainWindow", u"Video Open", None))
        self.actionShading.setText(QCoreApplication.translate("MainWindow", u"Shading", None))
#if QT_CONFIG(tooltip)
        self.actionShading.setToolTip(QCoreApplication.translate("MainWindow", u"Shading Correction", None))
#endif // QT_CONFIG(tooltip)
        self.actionTemplate_Matching.setText(QCoreApplication.translate("MainWindow", u"Template Matching", None))
        self.actionFigure_Fitting.setText(QCoreApplication.translate("MainWindow", u"Figure Fitting", None))
        self.actionHough.setText(QCoreApplication.translate("MainWindow", u"Hough", None))
        self.actionDL_Image_Classifier.setText(QCoreApplication.translate("MainWindow", u"Image Classifier", None))
        self.actionAffine.setText(QCoreApplication.translate("MainWindow", u"Affine", None))
        self.rBtn_View_Mode.setText(QCoreApplication.translate("MainWindow", u"View", None))
        self.rBtn_File_Mode.setText(QCoreApplication.translate("MainWindow", u"File", None))
        self.lEdit_Input_Dir.setPlaceholderText(QCoreApplication.translate("MainWindow", u"Input Directory", None))
        self.tBtn_Input_Dir.setText(QCoreApplication.translate("MainWindow", u"...", None))
        self.lEdit_Output_Dir.setPlaceholderText(QCoreApplication.translate("MainWindow", u"Output Directory", None))
        self.tBtn_Output_Dir.setText(QCoreApplication.translate("MainWindow", u"...", None))
        self.pBtn_ImageTable_Review.setText(QCoreApplication.translate("MainWindow", u"Review", None))
        self.pBtn_ImageTable_All_Check.setText(QCoreApplication.translate("MainWindow", u"All Check", None))
        self.pBtn_ImageTable_All_Uncheck.setText(QCoreApplication.translate("MainWindow", u"All Uncheck", None))
        self.lEdit_ImageTable_Search_Recode.setPlaceholderText(QCoreApplication.translate("MainWindow", u"Search Name", None))
        self.lbl_ImageTable_Target_Count.setText(QCoreApplication.translate("MainWindow", u"Target Count", None))
        self.menuFile.setTitle(QCoreApplication.translate("MainWindow", u"File", None))
        self.menuSave_As.setTitle(QCoreApplication.translate("MainWindow", u"Save As", None))
        self.menuEdit.setTitle(QCoreApplication.translate("MainWindow", u"Edit", None))
        self.menuImage.setTitle(QCoreApplication.translate("MainWindow", u"Image", None))
        self.menuType.setTitle(QCoreApplication.translate("MainWindow", u"Type", None))
        self.menuColor.setTitle(QCoreApplication.translate("MainWindow", u"Color", None))
        self.menuTransform.setTitle(QCoreApplication.translate("MainWindow", u"Transform", None))
        self.menuZoom.setTitle(QCoreApplication.translate("MainWindow", u"Zoom", None))
        self.menuMask.setTitle(QCoreApplication.translate("MainWindow", u"Mask", None))
        self.menuProcess.setTitle(QCoreApplication.translate("MainWindow", u"Process", None))
        self.menuAnalyze.setTitle(QCoreApplication.translate("MainWindow", u"Analyze", None))
        self.menuML_DL.setTitle(QCoreApplication.translate("MainWindow", u"ML/DL", None))
        self.menu.setTitle(QCoreApplication.translate("MainWindow", u"Annotation", None))
        self.menuFeature_Extraction.setTitle(QCoreApplication.translate("MainWindow", u"Feature Extraction", None))
        self.menuML.setTitle(QCoreApplication.translate("MainWindow", u"ML", None))
        self.menuClassification.setTitle(QCoreApplication.translate("MainWindow", u"Classification", None))
        self.menuRegressor.setTitle(QCoreApplication.translate("MainWindow", u"Regressor", None))
        self.menuClustering.setTitle(QCoreApplication.translate("MainWindow", u"Clustering", None))
        self.menuDL.setTitle(QCoreApplication.translate("MainWindow", u"DL", None))
        self.menuDL_Classification.setTitle(QCoreApplication.translate("MainWindow", u"Classification", None))
        self.menuWindow.setTitle(QCoreApplication.translate("MainWindow", u"Window", None))
        self.menuHelp.setTitle(QCoreApplication.translate("MainWindow", u"Help", None))
        self.menuCamera.setTitle(QCoreApplication.translate("MainWindow", u"Camera", None))
        self.menuVideo.setTitle(QCoreApplication.translate("MainWindow", u"Video", None))
        self.menuLocal_Feature.setTitle(QCoreApplication.translate("MainWindow", u"Local Feature", None))
        self.menuKeyPoint.setTitle(QCoreApplication.translate("MainWindow", u"KeyPoint", None))
        self.menuDescriptor.setTitle(QCoreApplication.translate("MainWindow", u"Descriptor", None))
        self.menuKeyPoint_Descriptor.setTitle(QCoreApplication.translate("MainWindow", u"KeyPoint&Descriptor", None))
        self.menuDetector.setTitle(QCoreApplication.translate("MainWindow", u"Detector", None))
        self.menuMition.setTitle(QCoreApplication.translate("MainWindow", u"Motion Tracking", None))
        self.menuKalman_Filter.setTitle(QCoreApplication.translate("MainWindow", u"Kalman Filter", None))
        self.toolBar.setWindowTitle(QCoreApplication.translate("MainWindow", u"toolBar", None))
    # retranslateUi

